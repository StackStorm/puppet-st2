#!/bin/sh
# Init script for st2actionrunner
# Maintained by StackStorm Engineering <opsadmin@stackstorm.com>
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          st2actionrunner
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: StackStorm st2actionrunner service
# Description:       StackStorm st2actionrunner service
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

name="st2actionrunner"
program="/usr/bin/st2actionrunner"
args="--config-file /etc/st2/st2.conf"

[ -r /etc/default/$name ] && . /etc/default/$name
[ -r /etc/sysconfig/$name ] && . /etc/sysconfig/$name
[ -r /etc/environment ] && . /etc/environment

if [ -z "$WORKERS" ]; then
  WORKERS=2
fi

trace() {
  logger -t "/etc/init.d/st2actionrunner" "$@"
}

emit() {
  trace "$@"
  echo "$@"
}

start() {
  a=1
  while [ $a -le $WORKERS ]; do
    pidfile="/var/run/$name.$a.pid"
    a=`expr $a + 1`
    $program $args > /dev/null 2>&1 &
    echo $! > $pidfile
    emit "$name $a started"
  done

  return 0
}

stop() {
  # Try a few times to kill TERM the program
  b=1
  while [ $b -le $WORKERS ]; do
    pidfile="/var/run/$name.$b.pid"
    pid=$(cat "$pidfile")
    if status_pid $b; then
      trace "Killing $name $b (pid $pid) with SIGTERM"
      kill -TERM $pid
      # Wait for it to exit.
      for i in 1 2 3 4 5 ; do
        trace "Waiting $name $b (pid $pid) to die..."
        status_pid $b || break
        sleep 1
      done
      if status_pid $b; then
        emit "$name $b stop failed; still running."
      else
        emit "$name $b stopped."
      fi
    fi

    b=`expr $b + 1`
  done

  return 0
}

status_pid() {
  pidfile="/var/run/$name.$1.pid"

  if [ -f "$pidfile" ] ; then
    pid=$(cat "$pidfile")
    if ps -p $pid > /dev/null 2> /dev/null ; then
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

status() {
  c=1
  exit_code=0

  while [ $c -le $WORKERS ]; do
    pidfile="/var/run/$name.$c.pid"
    status_pid $c
    return_code=$?
    if [ $return_code -eq 0 ]; then
      trace "$name (worker $c) is running"
    else
      trace "$name (worker $c) is not running"
      exit_code=1
    fi

    c=`expr $c + 1`
  done

  return $exit_code
}

case "$1" in
  start|stop|restart)
    trace "Attempting '$1' on st2actionrunner"
    ;;
esac

case "$1" in
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      emit "$name is already running"
      exit $code
    else
      start
      exit $?
    fi
    ;;
  stop) stop ;;
  status)
    status
    code=$?
    if [ $code -eq 0 ] ; then
      emit "$name is running"
    else
      emit "$name is not running"
    fi
    exit $code
    ;;
  restart)
    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?
